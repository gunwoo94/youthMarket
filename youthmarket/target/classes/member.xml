<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberns">
	<resultMap type="member" id="memberResult">
		<result property="userNo" column="USER_NO" />
		<result property="userId" column="USER_ID" />
		<result property="userPassword" column="USER_PASSWORD" />
		<result property="userName" column="USER_NAME" />
		<result property="phone" column="PHONE" />
		<result property="birth" column="BIRTH" />
		<result property="email" column="EMAIL" />
		<result property="count" column="COUNT" />
		<result property="createDate" column="CREATE_DATE" />
		<result property="status" column="STATUS" />
		<result property="heartCount" column="heartCount" />
		<result property="blackList" column="BLACKLIST" />
		<result property="account" column="account" />
		<result property="reportCount" column="reportCount" />
		<result property="fileName" column="filename" />
	</resultMap>
	<select id="select" parameterType="string"
		resultMap="memberResult">
		select * from member where user_id=#{userId}
	</select>
	<select id="selectEmail" parameterType="string"
		resultMap="memberResult">
		select * from member where EMAIL=#{email}
	</select>
	<select id="selectRP" parameterType="string"
		resultMap="memberResult">
		select * from member where USER_NAME=#{userName}
	</select>
	<insert id="insert" parameterType="member">
		<selectKey keyProperty="userNo" order="BEFORE"
			resultType="integer">
			select nvl(max(user_no), 0) + 1 userNo from member
		</selectKey>
		insert into member values(#{userNo},
		#{userId},#{userPassword},#{userName},#{phone},#{birth},#{email},0,sysdate,'Y',0,'N',#{account},0,#{fileName})
	</insert>
	<select id="memberList" parameterType="map"
		resultMap="memberResult">
		select * from (select a.*, rowNum rn from(
		select * from
		member order by USER_NO desc) a)
		where rn between #{startRow} and
		#{endRow}
	</select>
	<select id="count" resultType="integer">
		select count(*) from member
	</select>
	<update id="update" parameterType="member">
		update member
		set
		USER_PASSWORD=#{userPassword},
		USER_NAME=#{userName},
		PHONE=#{phone},
		BIRTH=#{birth}, EMAIL=#{email},
		account=#{account}
		<if test="fileName != null">
			, filename=#{fileName}
		</if>
		where
		USER_ID=#{userId}
	</update>
	<update id="delete" parameterType="String">
		update member set STATUS='N'
		where USER_ID=#{userId}
	</update>
	<update id="updatePassword" parameterType="member">
		update member
		set
		USER_PASSWORD=#{userPassword}
		where
		USER_ID=#{userId}
	</update>

	<select id="blockList" parameterType="map"
		resultMap="memberResult">
		SELECT *
		FROM (
		SELECT a.*, ROWNUM rn
		FROM (
		SELECT *
		FROM MEMBER
		WHERE BLACKLIST = 'Y'
		ORDER BY USER_NO DESC
		) a
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<select id="block_count" resultType="integer">
		select count(*) from MEMBER
		WHERE BLACKLIST = 'Y'
	</select>
	<!-- 관리자페이지 - 블랙리스트 상태변경 -->
	<update id="adminBlockAccept" parameterType="integer">
		UPDATE MEMBER
		SET STATUS = 'N', BLACKLIST = 'Y'
		WHERE USER_NO = #{userNo}
	</update>
	<update id="adminBlockCancel" parameterType="integer">
		UPDATE MEMBER
		SET STATUS = 'Y', BLACKLIST = 'N'
		WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 관리자 유저 삭제 -->
	<delete id="adminUserDelete" parameterType="integer">
		DELETE MEMBER WHERE USER_NO = #{userNo}
	</delete>
	
	<update id="adminBlockList" parameterType="integer">
		UPDATE MEMBER
		SET STATUS = 'N', BLACKLIST = 'Y'
		WHERE USER_NO = #{userNo}
	</update>
</mapper>